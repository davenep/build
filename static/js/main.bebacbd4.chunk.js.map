{"version":3,"sources":["index.js"],"names":["ASSETS_URL","concat","window","location","origin","MODEL_URL","WEIGHTS_URL","loadModel","_ref","Object","_Users_macbook_myproject_frontend_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_Users_macbook_myproject_frontend_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","model","input","wrap","_context","prev","next","loadFrozenModel","sent","tf","predict","abrupt","stop","this","apply","arguments","_ref2","_callee2","img","t0","image","resized","offset","normalized","output","predictions","time","_context2","performance","now","toFloat","resizeBilinear","sub","div","expandDims","data","labels","map","label","index","accuracy","sort","b","toFixed","_x","_x2","_ref3","_callee3","_context3","document","getElementById","append","JSON","stringify","start"],"mappings":"+SAIMA,EAAU,GAAAC,OAAMC,OAAOC,SAASC,OAAtB,WACVC,EAAS,GAAAJ,OAAMD,EAAN,gCACTM,EAAW,GAAAL,OAAMD,EAAN,gCAGXO,EAAS,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAL,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACIC,YAAgBhB,EAAWC,GAD/B,cACVS,EADUG,EAAAI,KAEVN,EAAQO,IAAS,CAAC,EAJP,QAIkC,IAEnDR,EAAMS,QAAQ,CAAER,UAJAE,EAAAO,OAAA,SAMTV,GANS,wBAAAG,EAAAQ,SAAAZ,EAAAa,SAAH,yBAAAnB,EAAAoB,MAAAD,KAAAE,YAAA,GASTL,EAAO,eAAAM,EAAArB,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAkB,EAAOC,EAAKjB,GAAZ,IAAAkB,EAAAC,EAAAC,EAAAC,EAAAC,EAAArB,EAAAsB,EAAAC,EAAAC,EAAA,OAAA7B,EAAAC,EAAAK,KAAA,SAAAwB,GAAA,cAAAA,EAAAtB,KAAAsB,EAAArB,MAAA,cACRa,EAAKS,YAAYC,MACjBT,EAAQX,IAAcS,GAAKY,UAC3BT,EAAUZ,IAASsB,eAAeX,EAAO,CAd9B,UAeXE,EAASb,IAAU,OACnBc,EAAaF,EAAQW,IAAIV,GAAQW,IAAIX,GACrCpB,EAAQqB,EAAWW,WAAW,GANtBP,EAAArB,KAAA,EAOOG,IAAQ,kBAAMR,EAAMS,QAAQ,CAAER,YAAUiC,OAP/C,cAORX,EAPQG,EAAAnB,KASRiB,EAAcW,EACjBC,IAAI,SAACC,EAAOC,GAAR,MAAmB,CAAED,QAAOE,SAAUhB,EAAOe,MACjDE,KAAK,SAAC3C,EAAG4C,GAAJ,OAAUA,EAAEF,SAAW1C,EAAE0C,WAC3Bd,EAZQ,GAAAvC,QAYGyC,YAAYC,MAAQV,GAAIwB,QAAQ,GAZnC,OAAAhB,EAAAhB,OAAA,SAaP,CAAEc,cAAaC,SAbR,yBAAAC,EAAAf,SAAAK,EAAAJ,SAAH,gBAAA+B,EAAAC,GAAA,OAAA7B,EAAAF,MAAAD,KAAAE,YAAA,IAgBF,eAAA+B,EAAAnD,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAgD,IAAA,IAAA7C,EAAAsB,EAAAvB,EAAAwB,EAAA,OAAA5B,EAAAC,EAAAK,KAAA,SAAA6C,GAAA,cAAAA,EAAA3C,KAAA2C,EAAA1C,MAAA,cACNJ,EAAQ+C,SAASC,eAAe,SAChC1B,EAASyB,SAASC,eAAe,UAF3BF,EAAA1C,KAAA,EAGQb,IAHR,cAGNQ,EAHM+C,EAAAxC,KAAAwC,EAAA1C,KAAA,EAIcI,EAAQR,EAAOD,GAJ7B,OAINwB,EAJMuB,EAAAxC,KAKZgB,EAAO2B,OAAOC,KAAKC,UAAU5B,EAAa,KAAM,IALpC,wBAAAuB,EAAApC,SAAAmC,EAAAlC,SAAH,yBAAAiC,EAAAhC,MAAAD,KAAAE,aAAA,EAQXuC","file":"static/js/main.bebacbd4.chunk.js","sourcesContent":["import * as tf from '@tensorflow/tfjs'\nimport { loadFrozenModel } from '@tensorflow/tfjs-converter'\nimport labels from './labels.json'\n\nconst ASSETS_URL = `${window.location.origin}/assets`\nconst MODEL_URL = `${ASSETS_URL}/model/tensorflowjs_model.pb`\nconst WEIGHTS_URL = `${ASSETS_URL}/model/weights_manifest.json`\nconst IMAGE_SIZE = 224 // Model input size\n\nconst loadModel = async () => {\n  const model = await loadFrozenModel(MODEL_URL, WEIGHTS_URL)\n  const input = tf.zeros([1, IMAGE_SIZE, IMAGE_SIZE, 3])\n   // Warm up GPU\n  model.predict({ input }) // MobileNet V1\n  //model.predict({ Placeholder: input }) // MobileNet V2\n  return model\n}\n\nconst predict = async (img, model) => {\n  const t0 = performance.now()\n  const image = tf.fromPixels(img).toFloat()\n  const resized = tf.image.resizeBilinear(image, [IMAGE_SIZE, IMAGE_SIZE])\n  const offset = tf.scalar(255 / 2)\n  const normalized = resized.sub(offset).div(offset)\n  const input = normalized.expandDims(0)\n  const output = await tf.tidy(() => model.predict({ input })).data() // MobileNet V1\n  //const output = await tf.tidy(() => model.predict({ Placeholder: input })).data() // MobileNet V2\n  const predictions = labels\n    .map((label, index) => ({ label, accuracy: output[index] }))\n    .sort((a, b) => b.accuracy - a.accuracy)\n  const time = `${(performance.now() - t0).toFixed(1)} ms`\n  return { predictions, time }\n}\n\nconst start = async () => {\n  const input = document.getElementById('input')\n  const output = document.getElementById('output')\n  const model = await loadModel()\n  const predictions = await predict(input, model)\n  output.append(JSON.stringify(predictions, null, 2))\n}\n\nstart()\n"],"sourceRoot":""}